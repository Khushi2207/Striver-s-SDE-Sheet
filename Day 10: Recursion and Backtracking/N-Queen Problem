bool is_safe(int row,int col,int n,vector<vector<int>>&b)
    {
        for(int i=0;i<row;i++)
        {
            if(b[i][col]==1)
            return false;
        }
        
        int i=row,j=col;
        while(i>=0 && j>=0)
        {
            if(b[i][j]==1)
            return false;
            
            i--;
            j--;
        }
        i=row,j=col;
        while(i>=0 && j<n)
        {
            if(b[i][j]==1)
            return false;
            
            i--;
            j++;
        }
        return true;
    }

    void fun(int i,int j,int n,vector<vector<int>>&b,vector<vector<int>>&ans,vector<int>&v)
    {
        if(i==n)
        {
            ans.push_back(v);
            return;
        }
        for(int col=0;col<n;col++)
        {
            if(is_safe(i,col,n,b))
            {
                b[i][col]=1;
                v.push_back(col+1);
                fun(i+1,j,n,b,ans,v);
                b[i][col]=0;
                v.pop_back();
            }
        }
    }

    

    vector<vector<int>> nQueen(int n) 
    {
        vector<vector<int>>ans;
        vector<vector<int>>b(n,vector<int>(n,0));
        vector<int>v;
        
        fun(0,0,n,b,ans,v);
        
        if(ans.size()==0)
        return vector<vector<int>>{};
        else
        return ans;
        
    }
