//     O(m+n)
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        unordered_set<ListNode*>st;
        ListNode* temp1=headA;
        ListNode* temp2=headB;
        while(temp1!=NULL)
        {
            st.insert(temp1);
            temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            if(st.find(temp2)!=st.end())
                return temp2;
            
            temp2=temp2->next;
        }
        return NULL;
        
    }
//0(m*n)

//     ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
//     {
//         ListNode* temp1=headA;
//         ListNode* temp2=headB;
        
//         if(temp1==NULL || temp2==NULL)
//             return NULL;
        
//         if(temp1->next==NULL && temp2->next==NULL && temp1==temp2)
//             return temp1;
        
//         while(temp1!=temp2)
//         {
             
//             temp1=temp1->next;
//             temp2=temp2->next;
            
//             if(temp1==temp2)
//                 return temp1;
            
//             if(temp1==NULL)
//                 temp1=headB;
            
//             if(temp2==NULL)
//                 temp2=headA;  
//         }
//         return temp1;
        
//     }
