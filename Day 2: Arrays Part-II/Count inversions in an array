void merge(long long arr[], long long l, long long  mid, long long r,long long int &inv)
    {
        long long n1=mid-l+1;
        long long n2=r-mid;
        
        long long a[n1],b[n2];
        for(int i=0;i<n1;i++)
        {
            a[i]=arr[l+i];
        }
        for(int i=0;i<n2;i++)
        {
            b[i]=arr[mid+i+1];
        }
        long long i=0,j=0,k=l;
        while(i<n1 && j<n2)
        {
            if(a[i]>b[j])
            {
                arr[k]=b[j];
                inv+=(n1-i);
                j++;
                k++;
            }
            else
            {
                arr[k]=a[i];
                
                i++;
                k++;
            }
        }
        
        while(i<n1)
        {
            arr[k]=a[i];
            k++;
            i++;
        }
        
        while(j<n2)
        {
            arr[k]=b[j];
            j++;
            k++;
        }
        
        
    }
    
    void mergeSort(long long arr[], long long l, long long r,long long int &inv)
    {
        if(l<r)
        {
        int mid=(l+r)/2;
        mergeSort(arr,l,mid,inv);
        mergeSort(arr,mid+1,r,inv);
        
        merge(arr,l,mid,r,inv);
        }
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long int inv=0;
        mergeSort(arr,0,N-1,inv);
        return inv;
    }
