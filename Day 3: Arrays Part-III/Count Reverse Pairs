void merge(vector<int>&nums,int l,int mid,int r,int&ans)
    {
        int i=l,j=mid+1;
        for(i=l;i<=mid;i++)
        {
            while(j<=r && (long long int)nums[i]>2*(long long int)nums[j])
            j++;
            
        
            ans+=j-(mid+1);
            
        }
        vector<int>temp;
        int left=l,right=mid+1;
        while(left<=mid && right<=r)
        {
            if(nums[left]>=nums[right])
               temp.push_back(nums[right++]);
            else
                temp.push_back(nums[left++]);
        }
        
        while(left<=mid)
            temp.push_back(nums[left++]);
        
        while(right<=r)
            temp.push_back(nums[right++]);
        
        for(int i=l;i<=r;i++)
            nums[i]=temp[i-l];
        
        
    }
    
    
    void merge_sort(vector<int>&nums,int l,int r,int &ans)
    {
        if(l<r)
        {
            int mid=l+(r-l)/2;
            merge_sort(nums,l,mid,ans);
            merge_sort(nums,mid+1,r,ans);
            
            merge(nums,l,mid,r,ans);
        }
    }
    
    int reversePairs(vector<int>& nums) 
    {
        int n=nums.size();
        int ans=0;
        merge_sort(nums,0,n-1,ans);
        return ans;
    }
