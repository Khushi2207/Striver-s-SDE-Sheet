void insert_at_bottom(stack<int>&st,int el)
    {
        if(st.empty() || el>st.top())
        {
            st.push(el);
            return;
        }
        
        int top_el=st.top();
        st.pop();
        insert_at_bottom(st,el);
        st.push(top_el);
    }
    
    
    void fun(stack<int>&st)
    {
        if(st.empty() || st.size()==1)
        return;
        
        int el=st.top();
        st.pop();
        fun(st);
        insert_at_bottom(st,el);
    }

    // vector<int> Reverse(stack<int> st)
    // {
    //     vector<int>ans;
        
    //     fun(st);
        
    //     while(!st.empty())
    //     {
    //         ans.push_back(st.top());
    //         st.pop();
    //     }
    //     reverse(ans.begin(),ans.end());
    //     return ans;
        
    // }
void SortedStack :: sort()
{
   fun(s);
}
